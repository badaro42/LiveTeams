var osm, osmUrl;
var team_map, user_map;
var curr_marker = undefined, remove_btn;
var cluster;
var parent_list_entry_id, username_to_be_removed, user_role_to_be_removed;
var uri;

// variaveis da cena da search bar
var allEntityEntries, allEntityNames, entityNamesIndexed = [], entityEntriesIndexed = [];
var searchBar, noResultsDiv;
var create_team_page;

// variaveis com o lider e o responsavel pela posição da equipa
var curr_team_leader_id;
var curr_team_location_id;
var curr_leader_profile;

var advanced_options_open = false;

var team_highlight_icon = L.icon({
  iconUrl: '/assets/bullseye-64.png',
  iconSize: [38, 38], // size of the icon
  iconAnchor: [19, 30], // point of the icon which will correspond to marker's location
  popupAnchor: [-1, -30] // point from which the popup should open relative to the iconAnchor
});

var spin_options = {
  lines: 15, // The number of lines to draw
  length: 0, // The length of each line
  width: 11, // The line thickness
  radius: 40, // The radius of the inner circle
  scale: 0.5, // Scales overall size of the spinner
  corners: 1, // Corner roundness (0..1)
  color: '#000', // #rgb or #rrggbb or array of colors
  opacity: 0, // Opacity of the lines
  rotate: 0, // The rotation offset
  direction: 1, // 1: clockwise, -1: counterclockwise
  speed: 1.2, // Rounds per second
  trail: 60, // Afterglow percentage
  fps: 30, // Frames per second when using setTimeout() as a fallback for CSS
  zIndex: 2e9, // The z-index (defaults to 2000000000)
  className: 'spinner', // The CSS class to assign to the spinner
  top: '50%', // Top position relative to parent
  left: '50%', // Left position relative to parent
  shadow: false, // Whether to render a shadow
  hwaccel: true, // Whether to use hardware acceleration
  position: 'absolute' // Element positioning
};


$(document).ready(function () {

  // inicialização da dropdown da barra de navegação
  $('.dropdown-button').dropdown({
        inDuration: 300,
        outDuration: 225,
        constrain_width: true, // Does not change width of dropdown to that of the activator
        hover: true, // Activate on hover
        gutter: 0, // Spacing from edge
        belowOrigin: true, // Displays dropdown below the button
        alignment: 'left' // Displays dropdown with edge aligned to the left of button
      }
  );

  // inicialização da barra de navegação lateral
  $(".button-collapse").sideNav();

  cluster = L.markerClusterGroup({chunkedLoading: true});

  // atualizar posição do utilizador
  $("#update_location").click(function (e) {
    console.log("CARREGUEI NO BOTAO PARA ATUALIZAR POSIÇÃO");
    var text_coords = $("#new_coords").val();
    var c_arr = parsePointCoordinates(text_coords);

    console.log("Latitude: " + c_arr[1]);
    console.log("Longitude: " + c_arr[0]);

    $.ajax({
      type: "POST",
      url: "/update_location",
      data: {
        latitude: c_arr[1],
        longitude: c_arr[0],
        user_id: gon.user_id
      },
      success: function (result) {
        console.log(result);
        $("#new_coords").val('POINT()');
      },
      error: function (err) {
        console.log(err);
        $("#new_coords").val('Erro a atualizar coordenadas!');
      }
    });
  });

  uri = document.location;
  var href = uri.pathname;
  var users_pages = href.indexOf("users") > -1;
  var teams_pages = href.indexOf("teams") > -1;
  var account_pages = href.indexOf("account") > -1;
  var edit_page = href.indexOf("edit") > -1;
  var new_page = href.indexOf("new") > -1;

  // caso haja uma barra no final do url, remove-a
  if (href[href.length - 1].localeCompare("/") == 0)
    href = href.substring(0, href.length - 1);

  // verificamos se o ultimo char do url é um numero
  // se sim, estamos na pagina do show, seja user ou equipa
  var is_a_number = !isNaN(parseInt(href[href.length - 1]));
  var text_coords, point_coords;

  // TODO: COLOCAR PAGINAS ESPECIFICAS EM CIMA!!!
  // TODO: EX: /users/new antes de /users
  // estamos na pagina para editar equipa - /teams/12/edit
  if (teams_pages) {
    $('#list_teams_path_entry').addClass('active');

    if (edit_page) {
      create_team_page = false;

      console.log("PÁGINA PARA EDITAR EQUIPA!!!");
      $('#dropdown_all_users').on('change', multipleDropdownOnChange);
      $('#select-none-btn').on('click', selectNoUsers);
      $('#select-all-btn').on('click', selectAllUsers);
      $('#select-undo-btn').on('click', setDefaultSelectedEntries);

      $('#select_team_leader').on('change', leaderDropdownOnChange);
      $('#edit_team_'+gon.current_team_id).submit(onTeamFormSubmit);

      curr_team_leader_id = $('#choose_leader_dropdown').find(':selected').val();
      curr_team_location_id = $('#select_team_position').find(':selected').val();

      text_coords = $('#team_latlon_highlight').val();

      // a equipa nao esta destacada para lado nenhum
      if (text_coords.length == 0) {
        point_coords = L.latLng(38.627881, -9.161007);
      }
      else {
        var coords_arr = parsePointCoordinates(text_coords);
        point_coords = L.latLng(coords_arr[1], coords_arr[0]);
      }

      // seleciona as entradas da multiple dropdown para aqueles utilizadores que ja estejam na equipa
      setDefaultSelectedEntries();

      osmUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
      osm = L.tileLayer(osmUrl, {maxZoom: 19});
      team_map = L.map("team_map", {
        zoom: 12,
        center: point_coords,
        layers: [osm],
        zoomControl: true,
        attributionControl: false
      });

      remove_btn = L.easyButton('fa-trash-o', function () {
        if (confirm("Pretende remover o destaque da equipa?")) {
          if (typeof curr_marker !== 'undefined') {
            team_map.removeLayer(curr_marker);
            $("#team_latlon_highlight").attr("value", null);
            remove_btn.disable();
          }
        }
      });

      remove_btn.disable();
      remove_btn.addTo(team_map);

      // apenas adicionar o marcador caso a equipa tenha localizaçao
      if (text_coords.length > 0) {
        var marker = L.marker(point_coords, {icon: team_highlight_icon}).addTo(team_map);
        var p_content = "<span>Esta equipa está destacada para as<br>seguintes coordenadas:</span>" +
            "<p>Latitude: <b>" + point_coords.lat + "</b>,<br>Longitude: <b>" +
            point_coords.lng + "</b></p>";
        marker.bindPopup(p_content).openPopup();
        curr_marker = marker;

        remove_btn.enable();
      }

      // adiciona um listener ao mapa para o evento "clique"
      team_map.on('click', onMapClick);
    }
    else if (new_page) {
      create_team_page = true;

      // TODO: MAPA VAZIO
      console.log("PÁGINA PARA CRIAR NOVA EQUIPA!!!");

      $('#dropdown_all_users').on('change', multipleDropdownOnChange);
      $('#select-none-btn').on('click', selectNoUsers);
      $('#select-all-btn').on('click', selectAllUsers);
      $('#select-undo-btn').on('click', setDefaultSelectedEntries);

      $('#select_team_leader').on('change', leaderDropdownOnChange);
      $('#new_team').submit(onTeamFormSubmit);

      curr_team_leader_id = $('#choose_leader_dropdown').find(':selected').val();
      curr_team_location_id = $('#select_team_position').find(':selected').val();

      osmUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
      osm = L.tileLayer(osmUrl, {maxZoom: 19});
      team_map = L.map("team_map", {
        zoom: 12,
        center: [38.627881, -9.161007],
        layers: [osm],
        zoomControl: true,
        attributionControl: false
      });

      remove_btn = L.easyButton('fa-trash-o', function () {
        if (confirm("Pretende remover o destaque da equipa?")) {
          if (typeof curr_marker !== 'undefined') {
            team_map.removeLayer(curr_marker);
            $("#team_latlon_highlight").attr("value", null);
            remove_btn.disable();
          }
        }
      });

      remove_btn.disable();
      remove_btn.addTo(team_map);

      // adiciona um listener ao mapa para o evento "clique"
      team_map.on('click', onMapClick);
    }
    else if (is_a_number) {
      console.log("PÁGINA PARA APRESENTAR INFO DA EQUIPA!!!");
      checkUsersWithoutTeam();

      // LISTENER PARA QUANDO O ADMIN ADICIONA UM USER À EQUIPA
      $('#confirm_add_user').on('click', addSingleUserToTeam);

      // abre o modal para confirmar a remoção do membro da equipa
      $('.remove-user-from-team').on('click', openConfirmRemovalModal);

      // o admin carregou no botao para remover o membro. vamos entao fazer-lhe a vontade
      $('#modal_confirm_removal').on('click', function (e) {
        var user_id = parseInt(parent_list_entry_id.split("_")[1]);

        console.log(parent_list_entry_id);
        console.log(user_id);

        removeSingleUserFromTeam(parent_list_entry_id, user_id);
      });

      osmUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
      osm = L.tileLayer(osmUrl, {maxZoom: 19});
      team_map = L.map("team_map", {
        zoom: 12,
        center: [38.627881, -9.161007],
        layers: [osm],
        zoomControl: true,
        attributionControl: false
      });

      console.log(gon.team_versions);

      var i = 0;
      // isto só é null quando a equipa acabou de ser criada!!
      if (gon.team_versions[0] == null) {
        i = 1;
        console.log("tou aqui dentro!!! ;D");
      }

      var counter = 1;
      var last_coords = L.latLng(0, 0); //apenas para inicializar

      // processa todas as posições anteriores (excepto a atual!!!!)
      var bounds_arr = [], c_arr, obj, popupContent;
      for (; i < gon.team_versions.length; i++) {

        if (gon.team_versions[i].hasOwnProperty('team'))
          obj = gon.team_versions[i].team;
        else
          obj = gon.team_versions[i];

        // caso ainda nao haja nenhuma localização!!
        if (obj.latlon !== null) {
          c_arr = parsePointCoordinates(obj.latlon);
          point_coords = L.latLng(c_arr[1], c_arr[0]);

          if (!last_coords.equals(point_coords)) {
            var date1 = new Date(obj.updated_at);
            var date2 = Date.now();
            var seconds = (date2 - date1) / 1000;
            //pos 0 - dias; pos 1 - horas; pos 2 - minutos; pos 3 - segundos
            var time_arr = secondsTimeSpanToHMS(seconds).split(':');
            console.log(time_arr);

            curr_marker = L.marker(point_coords, {icon: new L.NumberedDivIcon({number: counter})});
            popupContent = "<span>A equipa esteve neste ponto com</span><p>Latitude: <b>" +
                curr_marker.getLatLng().lat + "</b>,<br> Longitude: <b>" + curr_marker.getLatLng().lng +
                "</b></p><span> há <b>" + time_arr[0] + "</b> " +
                (time_arr[0] == 1 ? "dia" : "dias") + ", <b>" + time_arr[1] + "</b> " +
                (time_arr[1] == 1 ? "hora" : "horas") + ", <b>" + time_arr[2] + "</b> " +
                (time_arr[2] == 1 ? "minuto" : "minutos") + " e <b>" + Math.floor(time_arr[3]) + "</b> " +
                (time_arr[3] == 1 ? "segundo" : "segundos") + ".</span>";
            curr_marker.bindPopup(popupContent);

            cluster.addLayer(curr_marker);
//            team_map.addLayer(cluster);

            bounds_arr.push(point_coords);
            counter++;
            last_coords = point_coords;
          }
        }
      }

      // processa a posição atual da equipa!!
      c_arr = parsePointCoordinates(gon.current_latlon);
      point_coords = L.latLng(c_arr[1], c_arr[0]);

      if (!last_coords.equals(point_coords)) {
        curr_marker = L.marker(point_coords, {icon: new L.NumberedDivIcon({number: counter})});
        popupContent = "<span>Localização mais recente desta equipa.</span><p>Latitude: <b>" +
            curr_marker.getLatLng().lat + "</b>,<br> Longitude: <b>" + curr_marker.getLatLng().lng +
            "</b></p>";
        curr_marker.bindPopup(popupContent);

        cluster.addLayer(curr_marker);
        bounds_arr.push(point_coords);
      }

      // devolve as coordenadas do destaque da equipa
      text_coords = gon.highlight_latlon;

      // se estiver a null a equipa nao esta destacada.
      if (text_coords != null) {
        c_arr = parsePointCoordinates(text_coords);
        point_coords = L.latLng(c_arr[1], c_arr[0]);

        curr_marker = L.marker(point_coords, {icon: team_highlight_icon}).addTo(team_map);
        popupContent = "<span>Esta equipa está destacada para as<br>seguintes coordenadas:</span>" +
            "<p>Latitude: <b>" + curr_marker.getLatLng().lat + "</b>,<br>Longitude: <b>" +
            curr_marker.getLatLng().lng + "</b></p>";
        curr_marker.bindPopup(popupContent);

//        cluster.addLayer(curr_marker);
        bounds_arr.push(point_coords);
      }

      team_map.addLayer(cluster);

      console.log(bounds_arr);
      team_map.fitBounds(bounds_arr, {maxZoom: 15});
    }
    else {
      console.log("PÁGINA COM TODOS AS EQUIPAS!!!");
      initSearchEngine('team');

      $('#expand_all').on('click', toggleEntriesClass);
      $('#collapse_all').on('click', toggleEntriesClass);

      // anima a rotação do botao para expandir/colapsar a div
      $("#arrow_up").rotate({
        bind: {
          click: function () {
            if (advanced_options_open)
              $(this).rotate({angle: 0, animateTo: -180});
            else
              $(this).rotate({angle: -180, animateTo: 0});
          }
        }
      });

      // anima a div qque contem as opções avançadas de filtragem
      $('#toggle_options_panel').on('click', function () {
        if (advanced_options_open) // painel esta aberto -> vamos fechar
          $('#options_div').slideUp();
        else
          $('#options_div').slideDown();

        advanced_options_open = !advanced_options_open;
      });
    }
  }
  // estamos na pagina para apresentar utilizador - p.e. /users/12
  else if (users_pages || account_pages) {
    if (is_a_number) {
      // a pagina atual é a do proprio utilizador
      if (gon.user_id == gon.current_user_id)
        $('#list_profile_path_entry').addClass('active');
      else
        $('#list_users_path_entry').addClass('active');

      console.log("PÁGINA PARA APRESENTAR UTILIZADOR!!!");

      osmUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
      osm = L.tileLayer(osmUrl, {maxZoom: 19});
      user_map = L.map("user_map", {
        zoom: 12,
        center: L.latLng(38.627881, -9.161007),
        layers: [osm],
        zoomControl: true,
        attributionControl: false
      });

      var center, coords_arr, c_marker;
      if (gon.curr_user_pos !== null) {
        coords_arr = parsePointCoordinates(gon.curr_user_pos);
        center = L.latLng(coords_arr[1], coords_arr[0]);
        user_map.panTo(center);

        c_marker = L.marker(center).addTo(user_map);
        popupContent = "<span>Este utilizador encontra-se neste ponto<br> com as seguintes coordenadas:</span>" +
            "<p>Latitude: <b>" + c_marker.getLatLng().lat + "</b>,<br>Longitude: <b>" +
            c_marker.getLatLng().lng + "</b></p>";
        c_marker.bindPopup(popupContent).openPopup();
      }
    }
    else if (edit_page) {
      // a pagina atual é a do proprio utilizador
      if (gon.user_id == gon.current_user_id)
        $('#list_edit_profile_path_entry').addClass('active');
      else
        $('#list_users_path_entry').addClass('active');


      console.log("PÁGINA PARA editar UTILIZADOR!!!");

      // apenas permite numeros no campo do numero de telefone
      $(".numeric").numeric();
    }
    else {
      $('#list_users_path_entry').addClass('active');

      console.log("PÁGINA COM TODOS OS UTILIZADORES!!!");
      initSearchEngine('user');
    }
  }

  // Toggle search
  $('a#toggle-search').click(toggleSearchBar);

  // inicializa a select box para escolher o lider
  $('select').material_select();
});


function toggleSearchBar() {
  var search = $('div#search');
  if (search.is(":visible")) {
    search.slideUp({queue: false});
    $('#page-content').animate({duration: 'slow', 'margin-top': '0', queue: false});
  }
  else {
    search.slideDown({queue: false}, function () {
      search.find('input').focus();
    });
    $('#page-content').animate({duration: 'slow', 'margin-top': '71px', queue: false});
  }
  return false;
}

/**
 * Este método � executado quando o utilizador carrega no mapa no formulario das equipas
 * Come�a por verificar se ja h� marcador no mapa: se sim, remove-o.
 * A seguir cria um novo marcador no ponto em que o utilizador carregou e abre uma popup
 * com a localiza��o (USAR GEOCODING???)
 */
function onMapClick(e) {
  // o marcador ja foi inicializado, vamos remov�-lo
  if (typeof curr_marker !== "undefined")
    team_map.removeLayer(curr_marker);

  console.log(e);

  team_map.spin(true, spin_options);

  $.ajax({
    type: "GET",
    url: "/teams/reverse_geocode_coords",
    data: {
      latitude: e.latlng.lat,
      longitude: e.latlng.lng
    },
    success: function (result) {
      console.log(result);
      team_map.spin(false);

      curr_marker = L.marker([e.latlng.lat, e.latlng.lng], {icon: team_highlight_icon}).addTo(team_map);

      var popup = L.popup({maxWidth: 250});
      var popupContent = "<p>Novas coordenadas de destaque para a equipa! Só serão alteradas quando gravar as alterações.</p>" +
          "<p> Nova morada: <b>" + result + "</b></p><p>Coordenadas:<br><span>Latitude: <b>" + e.latlng.lat + "</b>," +
          "<br> Longitude: <b>" + e.latlng.lng + "</b>.</span></p>";

      popup.setContent(popupContent);
      curr_marker.bindPopup(popup).openPopup();

      var new_val = "POINT (" + e.latlng.lng + " " + e.latlng.lat + ")";
      $("#team_latlon_highlight").attr("value", new_val);

      remove_btn.enable();
    },
    error: function (err) {
      console.log(err);
      team_map.spin(false);
    }
  });
}

// o parametro "coords" � da forma -> "POINT(33.333 11.111)"
// retorna um vector com 2 posi�oes, uma para cada coordenada
function parsePointCoordinates(coords) {
  var split_res = coords.split("(");
  var new_split_res = split_res[1].split(" ");

  var res = [];
  res.push(new_split_res[0]); //latitude
  res.push(new_split_res[1].split(")")[0]); //longitude

  return res;
}

function secondsTimeSpanToHMS(s) {
  var d = Math.floor(s / 86400); // Get days
  s -= d * 86400;
  var h = Math.floor(s / 3600); //Get whole hours
  s -= h * 3600;
  var m = Math.floor(s / 60); //Get remaining minutes
  s -= m * 60;
  return d + ":" + h + ":" + m + ":" + s;
}

// inicializa as variaveis para o motor de pesquisa dos users ou teams
function initSearchEngine(param) {
  noResultsDiv = $('.no-results');
  searchBar = $('#search-bar');
  entityEntriesIndexed = [];
  entityNamesIndexed = [];

  if (param === 'team') {
    allEntityEntries = $(".team-entry");
    allEntityNames = $(".team-title");
  }
  else if (param === 'user') {
    allEntityEntries = $(".user-card");
    allEntityNames = $(".card-title");
  }

  // nomes das entidades a filtrar
  $.each(allEntityNames, function () {
    entityNamesIndexed.push($(this).text().replace(/\s{2,}/g, ' ').toLowerCase());
  });

  // div das varias entidades na pagina
  $.each(allEntityEntries, function () {
    entityEntriesIndexed.push($(this));
  });

  searchBar.on('keyup', searchListenerKeyPressed);
}

// função executada sempre que é introduzida uma letra na caixa de pesquisa
function searchListenerKeyPressed(param) {
  console.log("letra introduzida na search-bar!");

  if (param.keyCode == 13) { //tecla enter
    searchBar.trigger('blur');
    return true;
  }

  var entity;
  var entityEntry;
  var search_val = $.trim(searchBar.val()).toLowerCase(); // remove espaços brancos antes e dps da palavra

  allEntityNames.each(function () {
    entity = $(this);
    entity.html(entity.html().replace(/<span class="highlight">([^<]+)<\/span>/gi, '$1'));
  });

  if (search_val.length > 0) {
    for (var i in entityNamesIndexed) {
      entity = allEntityNames.eq(i);
      entityEntry = allEntityEntries.eq(i);

      if (entityNamesIndexed[i].indexOf(search_val) != -1) {
        entityEntry.removeClass('is-hidden');
        entity.html(entity.html()
            .replace(new RegExp(search_val + '(?!([^<]+)?>)', 'gi'), '<span class="highlight">$&</span>'));
      }
      else
        entityEntry.addClass('is-hidden');
    }
  }
  else
    $.each(allEntityEntries, function () {
      $(this).removeClass('is-hidden');
    });

  console.log(allEntityEntries.not('.is-hidden').length == 0);

  // ativa a div com a mensagem a dizer que nenhum utilizador foi encontrado
  noResultsDiv.toggleClass('is-visible', allEntityEntries.not('.is-hidden').length == 0);
}

// metodo que trata da associação do user seleccionado na dropdown à equipa atual
// esta dropdown encontra-se na pagina teams/#id
function addSingleUserToTeam(e) {
  e.preventDefault();
  var selected_item = $('#dropdown_add_user_to_team').find(":selected");

  if (selected_item.text() === "Escolha um utilizador...")
    noty({
      text: 'Não selecionou nenhum utilizador.',
      timeout: 3500, type: 'alert', layout: 'bottomCenter'
    });
  else {
    var selected_user_id = parseInt(selected_item[0].value);
    console.log(selected_item);
    console.log(selected_user_id);

    $.ajax({
      type: "POST",
      url: "/team_members",
      data: {
        team_member: {
          user_id: selected_user_id,
          team_id: gon.current_team_id
        }
      },
      success: function (result) {
        console.log(result);
        console.log("sucesso add_user_to_team");

        // append da nova entrada à lista de membros
        $(".collection").append(result);

        // atualiza a contagem de elementos na equipa
        var entries_count = $('#users_in_team_list li').length;
        console.log(entries_count);
        $("#team_members_count").text("Membros (" + entries_count + ")");

        // faz um scroll para a entrada acabada de criar
        $('body, html').animate({scrollTop: $('.collection li:last-child').offset().top}, 1000);

        //remove a entrada da dropdown para impedir que se introduza o mesmo user outra vez
        $("#dropdown_add_user_to_team option[value='" + selected_user_id + "']").remove();
        checkUsersWithoutTeam();

        noty({
          text: 'O utilizador foi adicionado com sucesso à equipa!',
          timeout: 3500, type: 'success', layout: 'bottomCenter'
        });

        // inicializa a tooltip da entrada acabada de introduzir!
        // o mesmo para o listener do remove
        $('.tooltipped').tooltip({delay: 15});
        $('.collection li:last-child > a').on('click', openConfirmRemovalModal);
      },
      error: function (err) {
        if (err.status == 403) {
          noty({
            text: 'Não tem permissões para adicionar utilizadores à equipa.',
            timeout: 3500, type: 'error', layout: 'bottomCenter'
          });
        }
        else {
          noty({
            text: 'Ocorreu um erro ao adicionar o utilizador à equipa!',
            timeout: 3500, type: 'error', layout: 'bottomCenter'
          });
        }
      }
    });
  }
}

// metodo que trata da remoção do user quando o utilizador carrega no botao para remover
// utilizador que se encontra na listagem de membros na pagina teams/#id
function removeSingleUserFromTeam(entry_id_to_remove, user_id) {
  var entry_to_remove = $('#' + entry_id_to_remove);
  console.log(entry_to_remove);
  console.log(entry_id_to_remove);

  $.ajax({
    type: "DELETE",
    url: "/team_members",
    data: {
      user_id: user_id,
      team_id: gon.current_team_id
    },
    success: function (result) {
      console.log(result);
      console.log("sucesso remove_user_to_team");

      // remove a entrada da lista correspondente ao utilizador
      // o codigo da atualização tem que estar aqui dentro pois o metodo animate recebe um parametro
      // que atrasa a execução do remove por meio segundo, o que fazia com que a contagem desse valores errados
      entry_to_remove.animate({opacity: 0}, 500, function () {
        entry_to_remove.remove();

        // atualiza a contagem de elementos na equipa
        var entries_count = $('#users_in_team_list li').length;
        console.log(entries_count);
        $("#team_members_count").text("Membros (" + entries_count + ")");

        //remove a entrada da dropdown para impedir que se introduza o mesmo user outra vez
        $("optgroup[label='" + user_role_to_be_removed + "']").append($('<option></option>').val(user_id).text(username_to_be_removed));
        checkUsersWithoutTeam();

        noty({
          text: 'O utilizador foi removido com sucesso da equipa!',
          timeout: 3500, type: 'success', layout: 'bottomCenter'
        });
      });
    },
    error: function (err) {
      if (err.status == 403) {
        noty({
          text: 'Não tem permissões para remover membros da equipa.',
          timeout: 3500, type: 'error', layout: 'bottomCenter'
        });
      }
      else {
        noty({
          text: 'Ocorreu um erro ao remover o membro da equipa!',
          timeout: 3500, type: 'error', layout: 'bottomCenter'
        });
      }
    }
  });
}

function openConfirmRemovalModal() {
  // $('this') representa o botao. o seu pai é a entrada que queremos remover.
  var parent = $(this).parent();

  user_role_to_be_removed = parent.find('.user-role').text();
  parent_list_entry_id = parent.attr('id');
  username_to_be_removed = parent.find('.username').text().trim();

  console.log("username_to_be_removed: " + username_to_be_removed);
  console.log("user_role_to_be_removed: " + user_role_to_be_removed);

  $('#modal_user_name').text(username_to_be_removed);
  $('#remove_user_confirm').openModal();
}

// verifica se há utilizadores na dropdown
// caso nao haja, esconde o formulario a apresenta uma mensagem a informar que nao ha users sem equipa
function checkUsersWithoutTeam() {
  if ($('#dropdown_add_user_to_team option').length == 1) {
    $('#add_user_form').css('display', 'none');
    $('#no_user_to_add').css('display', 'block');
  }
  else {
    $('#add_user_form').css('display', 'block');
    $('#no_user_to_add').css('display', 'none');
  }
}

// redirecciona para a pagina principal e centra o mapa na entidade selecionada
function goToGeoEntity(entity_id) {
  var new_uri = "http://" + uri.host + "?entity_id=" + entity_id;
  console.log(new_uri);
  window.location.replace(new_uri);
}

/**
 * Função que trata da expansão/colapsamento das entradas da lista de equipas.
 * O botão para expandir expande todas as que ainda estejam colapsadas
 * O botão de colapsar faz exactamente o inverso
 * @param e
 */
function toggleEntriesClass(e) {
  // expandir as entradas
  // caso nenhuma esteja expandida, expandimos todas
  // caso contrario, expandimos apenas as que estão colapsadas
  if (e.target.id === "expand_all") {
    var active_entries = $(".collapsible-header.active").toArray();
    if (active_entries.length > 0)
      $(".collapsible-header").not(".active").trigger('click');
    else
      $('.collapsible-header').trigger('click');
  }
  else if (e.target.id === "collapse_all") {
    var inactive_entries = $(".collapsible-header").not(".active").toArray();
    if (inactive_entries.length > 0)
      $(".collapsible-header.active").trigger('click');
    else
      $('.collapsible-header').trigger('click');
  }
}

function setDefaultSelectedEntries() {
  var all_options = $('#dropdown_all_users')[0].options;

  curr_leader_profile = undefined;
  $.each(all_options, function (index, elem) {
    if ($.inArray(parseInt(elem.value), gon.users_in_team) !== -1)
      $(this).prop('selected', true);
    else
      $(this).prop('selected', false);
  });

  // repoe tambem as entradas das dropdowns
  multipleDropdownOnChange();
}

/**
 * Listener invocado quando o utilizador altera a seleção de utilizadores
 * Começa por remover todas as entradas das dropdowns de baixo
 * Depois, insere em ambas os utilizadores que estão seleccionados
 * Quando o utilizador escolhe reverter para o inicio, este metodo é tambem chamado
 * para manter a consistencia das dropdowns
 */
function multipleDropdownOnChange() {
  var n_elem, parent, parent_label, i_value, i_text;
  var users_selected = $('#dropdown_all_users :selected'),
      select_leader = $('#select_team_leader'),
      select_team_position = $('#select_team_position');

  $("#select_team_leader option").remove();
  $("#select_team_position option").remove();

  // começa por fazer append duma entrada informativa, que diz "escolha um utilizador", sem valor associado
  select_leader.append($("<option/>", {
    value: "",
    text: "Escolha um utilizador..."
  }));
  select_team_position.append($("<option/>", {
    value: "",
    text: "Escolha um utilizador..."
  }));

  $.each(users_selected, function (index, elem) {
    n_elem = $(elem);
    parent = n_elem.parent();
    parent_label = parent[0].label;
    i_value = n_elem.val();
    i_text = n_elem.text();

    select_leader.append($("<option/>", {
      value: i_value,
      text: i_text
    }));
    select_team_position.append($("<option/>", {
      value: i_value,
      text: i_text
    }));
  });

  // repoe tambem as entradas seleccionadas nas dropdowns mas apenas na pagina de edição,
  // uma vez que na pagina de criação nao há lider nem responsavel
  if (curr_team_leader_id !== "" && curr_team_location_id !== "") {
    $("#select_team_leader option[value=" + curr_team_leader_id + "]").prop('selected', 'true');
    $("#select_team_position option[value=" + curr_team_location_id + "]").prop('selected', 'true');
  }
}

/**
 * Listener para quando o utilizador carrega no botao para selecionar todos os utilizadores
 * Para alem de os seleccionar a todos, adiciona-os tambem às dropdowns
 */
function selectAllUsers() {
  $('#dropdown_all_users option').prop('selected', true);

  curr_leader_profile = undefined;
  multipleDropdownOnChange();
}

/**
 * Listener para quando o utilizador carrega no botao para limpar a seleção da dropdown
 * Para alem de remover a seleção, remove-os tambem das dropdowns
 */
function selectNoUsers() {
  $('#dropdown_all_users option').prop('selected', false);

  curr_leader_profile = undefined;
  multipleDropdownOnChange();
}


function leaderDropdownOnChange(e) {
  console.log("CREATE - DROPDOWN DO LIDER FOI ALTERADA!!!!!");

  var user_id = $(this).find(':selected').val();
  console.log(user_id);

  $.ajax({
    type: "GET",
    url: "/users/get_user_profile",
    data: {
      user_id: user_id
    },
    success: function (result) {
      console.log("SUCESSO NA CENA DO PERFIL!!!!!!");
      console.log(result);

      curr_leader_profile = result.toString();
    },
    error: function (err) {
      console.log("ERRO NA CENA DO PERFIL!!!!!");
    }
  });
}


function onTeamFormSubmit() {
  if(curr_leader_profile === "Operacional") {
    var string_to_show = "ATENÇÃO!!\n\nO utilizador selecionado como líder tem o perfil 'Operacional'.\n\nUma vez " +
        "que utilizadores com este perfil não podem liderar equipas, ao confirmar a ação, carregando no 'OK', " +
        "o perfil deste utilizador será alterado para 'Gestor'.\nCarregue 'Cancelar' para escolher outro membro.";

    if (confirm(string_to_show)) {
      console.log("alterar o perfil deste sócio");
      return true;
    }
    else {
      console.log("caga nisso, vou escolher outro sóce");
      return false; // return false to cancel form action
    }
  }
}