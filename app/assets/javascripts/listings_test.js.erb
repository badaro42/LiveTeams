var osm, team_map, osmUrl, curr_marker = undefined;

$(document).ready(function () {

  // atualizar posição do utilizador
  $("#update_location").click(function (e) {
    console.log("CARREGUEI NO BOTAO PARA ATUALIZAR POSIÇÃO");
    console.log($("#new_coords").val());

    $.ajax({
      type: "POST",
      url: "/update_location",
      data: {
        latlon: $("#new_coords").val(),
        user_id: gon.user_id
      },
      success: function (result) {
        console.log(result);
        $("#new_coords").val('POINT()');
      },
      error: function (err) {
        console.log(err);
        $("#new_coords").val('Erro a atualizar coordenadas!');
      }
    });
  });


  var href = document.location.pathname;
  var users_pages = href.indexOf("users") > -1;
  var teams_pages = href.indexOf("teams") > -1;
  var edit_page = href.indexOf("edit") > -1;
  var new_page = href.indexOf("new") > -1;

  // caso haja uma barra no final do url, remove-a
  if (href[href.length - 1].localeCompare("/") == 0)
    href = href.substring(0, href.length - 1);

  // verificamos se o ultimo char do url é um numero
  // se sim, estamos na pagina do show, seja user ou equipa
  var is_a_number = !isNaN(parseInt(href[href.length - 1]));


  // TODO: COLOCAR PAGINAS ESPECIFICAS EM CIMA!!!
  // TODO: EX: /users/new antes de /users
  // estamos na pagina para editar equipa - /teams/12/edit
  if (teams_pages) {
    if (edit_page) {
      // TODO: MAPA COM LOCALIZAÇÃO ATUAL, PERMITE ARRASTAR MARCADOR!
      console.log("PÁGINA PARA EDITAR EQUIPA!!!");

      var text_coords = $('#team_latlon_highlight').val();
      var point_coords;

      // a equipa nao esta destacada para lado nenhum
      if (text_coords.length == 0) {
        point_coords = L.latLng(38.627881, -9.161007);
      }
      else {
        var coords_arr = parsePointCoordinates(text_coords);
        point_coords = L.latLng(coords_arr[1], coords_arr[0]);
      }

      osmUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
      osm = L.tileLayer(osmUrl, {maxZoom: 18});
      team_map = L.map("team_map", {
        zoom: 12,
        center: point_coords,
        layers: [osm],
        zoomControl: true,
        attributionControl: false
      });

      // apenas adicionar o marcador caso a equipa tenha localizaçao
      if (text_coords.length > 0) {
        var marker = L.marker(point_coords).addTo(team_map);
        curr_marker = marker;
      }

      // adiciona um listener ao mapa para o evento "clique"
      team_map.on('click', onMapClick);
    }
    else if (new_page) {
      // TODO: MAPA VAZIO
      console.log("PÁGINA PARA CRIAR NOVA EQUIPA!!!");

      osmUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
      osm = L.tileLayer(osmUrl, {maxZoom: 18});
      team_map = L.map("team_map", {
        zoom: 12,
        center: [38.627881, -9.161007],
        layers: [osm],
        zoomControl: true,
        attributionControl: false
      });

      // adiciona um listener ao mapa para o evento "clique"
      team_map.on('click', onMapClick);
    }
    else if (is_a_number) {
      // TODO: MAPA COM LOCALIZAÇÃO ATUAL, NAO DEVE PERMITIR ALTERAÇÕES
      console.log("PÁGINA PARA APRESENTAR INFO DA EQUIPA!!!");

      var text_coords = $('#curr_team_coords').val();
      var point_coords;

      osmUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
      osm = L.tileLayer(osmUrl, {maxZoom: 18});
      team_map = L.map("team_map", {
        zoom: 12,
        center: [38.627881, -9.161007],
        layers: [osm],
        zoomControl: true,
        attributionControl: false
      });

//      gon.watch('team_versions', {interval: 5000}, updateTeamPosition);

      console.log(gon.team_versions);
//      console.log(typeof gon.team_versions[1].latlon !== "undefined");

      var i = 0;
      // isto só é null quando a equipa acabou de ser criada!!
      if (gon.team_versions[0] == null) {
        i = 1;
        console.log("tou aqui dentro!!! ;D");
//        console.log(gon.team_versions[i].latlon !== null);
      }

      var counter = 1;
      var last_coords = L.latLng(0, 0); //apenas para inicializar

      // processa todas as posições anteriores (excepto a atual!!!!)
      var bounds_arr = [], c_arr;
      for (; i < gon.team_versions.length; i++) {
        // caso ainda nao haja nenhuma localização!!
        if (gon.team_versions[i].latlon !== null) {
          c_arr = parsePointCoordinates(gon.team_versions[i].latlon);
          point_coords = L.latLng(c_arr[1], c_arr[0]);

          if (!last_coords.equals(point_coords)) {
            curr_marker = L.marker(point_coords, {icon: new L.NumberedDivIcon({number: counter})}).addTo(team_map);
            bounds_arr.push(point_coords);
            counter++;
            last_coords = point_coords;
          }
        }
      }

      // processa a posição atual da equipa!!
      c_arr = parsePointCoordinates(gon.current_latlon);
      point_coords = L.latLng(c_arr[1], c_arr[0]);

      if (!last_coords.equals(point_coords)) {
        curr_marker = L.marker(point_coords, {icon: new L.NumberedDivIcon({number: counter})}).addTo(team_map);
        bounds_arr.push(point_coords);
      }

      console.log(bounds_arr);
      team_map.fitBounds(bounds_arr);


      // a equipa nao esta destacada para lado nenhum
//      if (text_coords.length == 0) {
//        point_coords = L.latLng(38.627881, -9.161007);
//      }
//      else {
//        var coords_arr = parsePointCoordinates(text_coords);
//        point_coords = L.latLng(coords_arr[1], coords_arr[0]);
//      }


      // apenas adicionar o marcador caso a equipa tenha localizaçao
//      if (text_coords.length > 0) {
//        curr_marker = L.marker(point_coords).addTo(team_map);
//        var popupContent = "<p><b>Localização atual da equipa:</b></p><p>[" +
//            curr_marker.getLatLng().lat + "; " + curr_marker.getLatLng().lng + "]</p>";
//        curr_marker.bindPopup(popupContent).openPopup();
//      }
    }
  }
  // estamos na pagina para editar utilizador - /users/12/edit
  else if (users_pages && edit_page) {
    console.log("PÁGINA PARA EDITAR UTILIZADOR!!!");
  }


//  $('#profile-user-info').pushpin({top: 64});

  /**
   * Positions the tabs
   */
  function positionTabs() {
    var tabs = $('#tab-wrapper');
    if (tabs.length) {
      var nav = $('#nav');
      var search = $('#search');
      var content = $('#content');
      var offsetTop = window.pageYOffset || document.documentElement.scrollTop;

      if (offsetTop > (nav.height() + (search.is(':visible') ? search.height() : 0)) && window.innerWidth > 600) {
        tabs.addClass('fixed');
        content.css({'padding-top': (tabs.height() + parseInt(tabs.css('margin-bottom'))) + 'px'});
      }
      else {
        tabs.removeClass('fixed');
        content.css({'padding-top': 0});
      }
    }
  }

  // Scroll events
  $(window).scroll(function (e) {
    positionTabs();
  });

  // Resize events
  $(window).resize(function (e) {
    positionTabs();
  });

  // Toggle search
  $('a#toggle-search').click(function () {
    var search = $('div#search');
    search.is(":visible") ? search.slideUp() : search.slideDown(function () {
      search.find('input').focus();
    });
    return false;
  });

  /**
   * Listener para quando uma checkbox � marcada ou desmarcada
   */
  $('input:checkbox').change(
      function () {
        // select para escolher o lider
        var select_leader = $('#select_team_leader');
        // select para escolher o user responsavel pela posição da equipa
        var select_team_position = $('#select_team_position');
        var i_value, i_text;

        var len = $("input[name='team[users][]']:checked").length;
        console.log(len);

        if (len > 0)
          $('#team-submit-form').removeClass("disabled");
        else if (len == 0)
          $('#team-submit-form').addClass("disabled");

        if ($(this).is(':checked')) {
          i_value = $(this).prop('value');
          i_text = $(this).next("label").text();

          console.log("++++++ CHECKED ++++++");
          console.log(i_value);
          console.log(i_text);

          select_leader.append($("<option/>", {
            value: i_value,
            text: i_text
          }));
          select_team_position.append($("<option/>", {
            value: i_value,
            text: i_text
          }));
        }
        else if (!($(this).is(':checked'))) {
          i_value = $(this).prop('value');
          console.log("------ UNCHECKED ------");
          $("#select_team_leader option[value=" + i_value + "]").remove();
          $("#select_team_position option[value=" + i_value + "]").remove();
        }
      });


  // inicializa a select box para escolher o lider
  $('select').material_select();
});

/**
 * Este método � executado quando o utilizador carrega no mapa no formulario das equipas
 * Come�a por verificar se ja h� marcador no mapa: se sim, remove-o.
 * A seguir cria um novo marcador no ponto em que o utilizador carregou e abre uma popup
 * com a localiza��o (USAR GEOCODING???)
 */
function onMapClick(e) {
  // o marcador ja foi inicializado, vamos remov�-lo
  if (typeof curr_marker !== "undefined")
    team_map.removeLayer(curr_marker);

  console.log(e);

  var popupContent = "<p><b>Localização atualizada com sucesso.</b></p><p>Nova localização: [" +
      e.latlng.lat + "; " + e.latlng.lng + "]</p>";

  curr_marker = L.marker([e.latlng.lat, e.latlng.lng]).addTo(team_map);
  curr_marker.bindPopup(popupContent).openPopup();

  var new_val = "POINT (" + e.latlng.lng + " " + e.latlng.lat + ")";
  $("#team_latlon_highlight").attr("value", new_val);
}

// o parametro "coords" � da forma -> "POINT(33.333 11.111)"
// retorna um vector com 2 posi�oes, uma para cada coordenada
function parsePointCoordinates(coords) {
  var split_res = coords.split("(");
  var new_split_res = split_res[1].split(" ");

  var res = [];
  res.push(new_split_res[0]); //latitude
  res.push(new_split_res[1].split(")")[0]); //longitude

  return res;
}

//function updateTeamPosition(args) {
//  console.log("FUNÇÃO DO GON - ARGUMENTOS:");
//  console.log(args);
//}